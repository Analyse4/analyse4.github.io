<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bla~ Bla~</title>
    <link>https://analyse4.github.io/</link>
    <description>Recent content on Bla~ Bla~</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>analysek4@gmail.com</contact>
    <copyright>&copy; <a href="https://github.com/Analyse4">Zehua Lu</a> 2019</copyright>
    
        <atom:link href="https://analyse4.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Test</title>
      <link>https://analyse4.github.io/posts/test/</link>
      <pubDate>Mon, 04 Mar 2019 17:37:50 +0800</pubDate>
      <author>Zehua Lu</author>
      <guid>https://analyse4.github.io/posts/test/</guid>
      <description></description>
      
      <content>&lt;pre&gt;&lt;code&gt;$ test
&lt;/code&gt;&lt;/pre&gt;
</content>
      
    </item>
    
    <item>
      <title>The Journey of Minikube</title>
      <link>https://analyse4.github.io/posts/2019-03-04-the-journey-of-minikube/</link>
      <pubDate>Mon, 04 Mar 2019 17:23:34 +0800</pubDate>
      <author>Zehua Lu</author>
      <guid>https://analyse4.github.io/posts/2019-03-04-the-journey-of-minikube/</guid>
      <description></description>
      
      <content>

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubernetes/minikube/master/images/logo/logo.png&#34; alt=&#34;icon&#34; /&gt;&lt;/p&gt;

&lt;p&gt;折腾了一周如何装minikube，记录一下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装 CentOS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装系统&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;连接网络&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;以太网&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;WI-FI&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装 ss&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装 privoxy&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配置文件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;设置 ss 和 privoxy 开机自启&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;开启VT-x or AMD-v virtualization&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装 virtualbox&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装 kubectl&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装 minikube&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;参考&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安装centos&#34;&gt;安装CentOS&lt;/h2&gt;

&lt;h5 id=&#34;environment&#34;&gt;&lt;strong&gt;Environment&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;hardware: thinkpad-T410&lt;/li&gt;
&lt;li&gt;version:  CentOS 7.5.1804&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(tips:发现了一个用于制作系统盘的软件Etcher)&lt;/p&gt;

&lt;h5 id=&#34;安装系统&#34;&gt;安装系统&lt;/h5&gt;

&lt;p&gt;镜像从相应官网下载，制作好系统盘后，think-T410开机时按F12可以进入引导设备选择界面，选择从U盘启动，会进入到CentOS7安装引导界面&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.stack.imgur.com/qyqly.png&#34; alt=&#34;install-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在这里遇到了问题，无论以何种规格安装(mininal, graph)都会在安装过程中界面卡死，只能重启重装，之后还会在安装界面卡死，周而复始，起初我以为是目前的centos版本对于thinkpad-T410的硬件来说太新了，所以换ubuntu装了下(这里不得不提一句ubuntu的安装界面真的很友好)，发现也出现一样的问题，后来在StackExchange上找到了答案&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This happens often on computers with old graphics hardware. By default the system tries to use a 1024x768 framebuffer mode to start the system with, but this doesn&amp;rsquo;t work with some old PCs.&lt;/p&gt;

&lt;p&gt;In this case, you can select &lt;strong&gt;Troubleshooting&lt;/strong&gt; from the menu, and then select &lt;strong&gt;Install &lt;distro&gt; in basic graphics mode&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按照上面的方式试了下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.stack.imgur.com/BIGmo.png&#34; alt=&#34;install-2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;果然还不行，看来这台机器的图形卡真的太老了:smile_cat:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On some &lt;em&gt;really&lt;/em&gt; ancient computers, even this won&amp;rsquo;t work. In that case you&amp;rsquo;ll need to do a text mode installation. Do this by selecting &lt;strong&gt;Install &lt;distro&gt;&lt;/strong&gt; but instead of pressing &lt;code&gt;Enter&lt;/code&gt;, press &lt;code&gt;Tab&lt;/code&gt; and add &lt;code&gt;nomodeset text&lt;/code&gt; to the end of the boot command line.&lt;/p&gt;

&lt;p&gt;[StackExange]: &lt;a href=&#34;https://unix.stackexchange.com/questions/353896/linux-install-goes-to-blank-screen&#34; target=&#34;_blank&#34;&gt;https://unix.stackexchange.com/questions/353896/linux-install-goes-to-blank-screen&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;只能按照最后一种方式安装，值得注意的是，&lt;code&gt;nomode text&lt;/code&gt;这种模式是以命令行的交互方式安装，相当于彻底砍掉了图形界面，即使图形卡再旧也不会对这种模式有任何影响，结果成功&lt;/p&gt;

&lt;h5 id=&#34;连接网络&#34;&gt;连接网络&lt;/h5&gt;

&lt;h6 id=&#34;以太网&#34;&gt;以太网&lt;/h6&gt;

&lt;p&gt;First, type &lt;code&gt;nmcli d&lt;/code&gt; command in your terminal for quick list &lt;strong&gt;ethernet card&lt;/strong&gt; installed on your machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lintut.com/wp-content/uploads/2014/08/CentOS_7-network-setup.png&#34; alt=&#34;connect-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Type &lt;code&gt;nmtui&lt;/code&gt; command in your terminal to open &lt;strong&gt;Network manager&lt;/strong&gt;. After opening Network manager chose &lt;strong&gt;“Edit connection&lt;/strong&gt;” and press Enter (Use &lt;code&gt;TAB&lt;/code&gt; button for choosing options).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lintut.com/wp-content/uploads/2014/08/CentOS_7-Network-manager-screen.png&#34; alt=&#34;connect-2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now choose you network interfaces and click “&lt;strong&gt;Edit&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lintut.com/wp-content/uploads/2014/08/Edit-your-network-interfaces.png&#34; alt=&#34;connect-3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Choose “&lt;strong&gt;Automatic&lt;/strong&gt;” in &lt;strong&gt;IPv4 CONFIGURATION&lt;/strong&gt; and check &lt;strong&gt;Automatically connect&lt;/strong&gt; check box and press &lt;code&gt;OK&lt;/code&gt; and quit from Network manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lintut.com/wp-content/uploads/2014/08/Set-ip-adress-using-DHCP.png&#34; alt=&#34;connect-4&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Reset network services:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ssh&#34;&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your server will get IP Address from DHCP .&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lintut.com/wp-content/uploads/2014/08/CentOS-7-check-ip-address.png&#34; alt=&#34;connect-5&#34; /&gt;&lt;/p&gt;

&lt;h6 id=&#34;无线网&#34;&gt;无线网&lt;/h6&gt;

&lt;p&gt;CentOS 7 以后采用**NetworkManager &lt;strong&gt;来管理网络连接，首先需要确保&lt;/strong&gt;NetworkManager &lt;strong&gt;能够管理无线设备从而支持WI-FI，要保证这一点，需要安装&lt;/strong&gt;NetworkManager -wifi&lt;strong&gt;，并重启&lt;/strong&gt;NetworkManager **&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yum install NetworkManager-wifi
systemctl restart NetworkManager
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后进入&lt;code&gt;nmtui&lt;/code&gt;中的&lt;strong&gt;Activate a connection&lt;/strong&gt;界面选择合适的WI-FI&lt;/p&gt;

&lt;h2 id=&#34;安装ss&#34;&gt;安装ss&lt;/h2&gt;

&lt;p&gt;略&lt;/p&gt;

&lt;h2 id=&#34;安装privoxy&#34;&gt;安装privoxy&lt;/h2&gt;

&lt;p&gt;安好了ss后，但它是&lt;strong&gt;socks5&lt;/strong&gt;代理，我门在shell里执行的命令，发起的网络请求现在还不支持&lt;strong&gt;socks5&lt;/strong&gt;代理，只支持&lt;strong&gt;http／https&lt;/strong&gt;代理。为此需要安装&lt;strong&gt;privoxy&lt;/strong&gt;代理，它能把电脑上所有&lt;strong&gt;http&lt;/strong&gt;请求转发给ss&lt;/p&gt;

&lt;p&gt;下载&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;wget http://www.silvester.org.uk/privoxy/source/3.0.26%20%28stable%29/privoxy-3.0.26-stable-src.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解压&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tar -vxf privoxy-3.0.26-stable-src.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装前需要&lt;code&gt;useradd privoxy&lt;/code&gt;创建一个用户privoxy&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;useradd privoxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后依次执行如下三条命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;autoheader &amp;amp;&amp;amp; autoconf
./configure
make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改配置文件，该之前备份配置文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cp  /etc/privoxy/config /etc/privoxy/config.bak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看&lt;code&gt;vim /etc/privoxy/config&lt;/code&gt;文件，&lt;/p&gt;

&lt;p&gt;先搜索关键字:&lt;code&gt;listen-address&lt;/code&gt;找到&lt;code&gt;listen-address 127.0.0.1:8118&lt;/code&gt;这一句，保证这一句没有注释，*8118*就是将来http代理要输入的端口。&lt;/p&gt;

&lt;p&gt;然后搜索&lt;code&gt;forward-socks5t&lt;/code&gt;,将&lt;code&gt;forward-socks5t / 127.0.0.1:1080 .&lt;/code&gt;此句的注释去掉&lt;/p&gt;

&lt;p&gt;执行如下命令启动&lt;strong&gt;privoxy&lt;/strong&gt;，参考&lt;a href=&#34;https://link.jianshu.com/?t=https%3A%2F%2Fwww.privoxy.org%2Fuser-manual%2Fstartup.html&#34; target=&#34;_blank&#34;&gt;官网,不同的平台对应不同的方法&lt;/a&gt;(这里针对&lt;strong&gt;CentOS&lt;/strong&gt;平台，有可能装在&lt;strong&gt;/usr/local/sbin&lt;/strong&gt;下)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/usr/sbin/privoxy --user privoxy /etc/privoxy/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行&lt;code&gt;vim /etc/profile&lt;/code&gt;,添加如下三句&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export http_proxy=http://127.0.0.1:8118
export https_proxy=http://127.0.0.1:8118
export ftp_proxy=http://127.0.0.1:8118
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果不能访问，请重启机器，依次打开&lt;strong&gt;shadowsocks&lt;/strong&gt;和&lt;strong&gt;privoxy&lt;/strong&gt;再测试&lt;/p&gt;

&lt;h2 id=&#34;设置-ss-和-privoxy-开机自启&#34;&gt;设置 ss 和 privoxy 开机自启&lt;/h2&gt;

&lt;h5 id=&#34;old-method&#34;&gt;Old method&lt;/h5&gt;

&lt;p&gt;由于&lt;strong&gt;ss&lt;/strong&gt;和&lt;strong&gt;privoxy&lt;/strong&gt;服务需要时刻保持运行，所以想到把这两个服务配置成开机自启的服务，首先找到的是通过配置&lt;strong&gt;/etc/rc.local&lt;/strong&gt;的方法，由于&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/etc/rc.local or /etc/rc.d/rc.local are no longer executed by default due to systemd-changes.
to still use those, you need to make /etc/rc.d/rc.local executable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;具体做法如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chmod +x /etc/rc.d/rc.local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假设需要开机自启的脚本为&lt;strong&gt;autobootup.sh&lt;/strong&gt;，那么应该在&lt;strong&gt;/etc/rc.local&lt;/strong&gt; (which is a symlink to &lt;strong&gt;/etc/rc.d/rc.local&lt;/strong&gt;)中添加以下代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;/your/path/autobootup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;recommended-method&#34;&gt;Recommended method&lt;/h5&gt;

&lt;p&gt;但这样做其实有一些潜在问题，因为打开&lt;strong&gt;/etc/rc.local&lt;/strong&gt;文件可以看到&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#!/bin/bash&lt;/p&gt;

&lt;p&gt;THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES&lt;/p&gt;

&lt;p&gt;It is highly advisable to create own systemd services or udev rules&lt;/p&gt;

&lt;p&gt;to run scripts during boot instead of using this file.&lt;/p&gt;

&lt;p&gt;In contrast to previous versions due to parallel execution during boot&lt;/p&gt;

&lt;p&gt;this script will NOT be run after all other services.&lt;/p&gt;

&lt;p&gt;Please note that you must run &amp;lsquo;chmod +x /etc/rc.d/rc.local&amp;rsquo; to ensure&lt;/p&gt;

&lt;p&gt;that this script will be executed during boot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以得知，这种方法是为了兼容性保留下来的，CentOS 7中建议使用创建自己的&lt;strong&gt;systemd services&lt;/strong&gt;的方式解决这种需求&lt;/p&gt;

&lt;p&gt;1.Let us first create a custom script to be run at system boot automatically.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;#!/bin/bash&lt;/p&gt;

&lt;p&gt;#some services for auto run during boot&lt;/p&gt;

&lt;p&gt;echo &amp;ldquo;This is a custom script to auto run during boot&amp;rdquo; &amp;gt; /var/tmp/script.out
echo &amp;ldquo;The time the script run was &amp;ndash;&amp;gt;  &lt;code&gt;date&lt;/code&gt;&amp;rdquo; &amp;gt;&amp;gt; /var/tmp/script.out&lt;/p&gt;

&lt;p&gt;#run ss-cli&lt;/p&gt;

&lt;p&gt;nohup sslocal -c /etc/shadowsocks.json /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/p&gt;

&lt;p&gt;#run privoxy&lt;/p&gt;

&lt;p&gt;nohup /usr/local/sbin/privoxy &amp;ndash;user privoxy /usr/local/etc/privoxy/config&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.Add execute permission(if it’s not already set).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chmod +x /your/path/yourscript.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a new service unit file at &lt;strong&gt;/etc/systemd/system/sample.service&lt;/strong&gt; with below content. The name of the service unit is user defined and can be any name of your choice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[Unit]
Description=auto run some scripts during boot&lt;/p&gt;

&lt;p&gt;[Service]
Type=forking
ExecStart=/root/myscripts/autobootup.sh
TimeoutStartSec=0&lt;/p&gt;

&lt;p&gt;[Install]
WantedBy=default.target&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里特别要注意的是&lt;strong&gt;Type=forking&lt;/strong&gt;，由于这里开机自启动的脚本中本质是通过该脚本启动两个进程，所以&lt;strong&gt;Type&lt;/strong&gt;对应的域应该填&lt;strong&gt;forking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reload the systemd process to consider newly created sample.service OR every time when sample.service gets modified.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable this service to start after reboot automatically.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl enable sample.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start the service.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl start sample.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot the host to verify whether the scripts are starting as expected during system boot.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;开启vt-x-or-amd-v-virtualization&#34;&gt;开启VT-x or AMD-v virtualization&lt;/h2&gt;

&lt;p&gt;VT-x or AMD-v virtualization must be enabled in your computer’s BIOS.&lt;/p&gt;

&lt;h2 id=&#34;安装virtualbox&#34;&gt;安装virtualbox&lt;/h2&gt;

&lt;p&gt;去官网下载相应的rpm包(&lt;strong&gt;Oracle Linux 7 / Red Hat Enterprise Linux 7 / CentOS 7&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;把相应的rpm包传到服务器上&lt;/p&gt;

&lt;p&gt;执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yum install VirtualBox-5.2-5.2.20_125813_el7-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里特别说明下rpm命令与yum命令的区别&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Next step is to actually install the software package and you have the two options &lt;code&gt;yum&lt;/code&gt; and &lt;code&gt;rpm&lt;/code&gt;. The method &lt;code&gt;rpm -i skype-4.2.0.13-2.fc20.i686.rpm&lt;/code&gt; will try to install the package but can complain about unmet dependencies. &lt;code&gt;yum install skype-4.2.0.13-2.fc20.i686.rpm&lt;/code&gt; will check for dependencies and will try to resolve them and provide you a detailed installation plan which you can accept to actually install the package including all its dependencies.&lt;/p&gt;

&lt;p&gt;[StackExange]: &lt;a href=&#34;https://unix.stackexchange.com/questions/343919/how-to-install-a-rpm-package-in-a-right-way&#34; target=&#34;_blank&#34;&gt;https://unix.stackexchange.com/questions/343919/how-to-install-a-rpm-package-in-a-right-way&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;之后运行virtualbox的时候可能会出现某个模块未编译的问题，安装提示装一个类似于内核头文件的包后重新编译该模块即可，具体细节忘记截图了，这里就不展开了&lt;/p&gt;

&lt;h2 id=&#34;安装-kubectl&#34;&gt;安装 kubectl&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;notice&lt;/strong&gt;: You must use a kubectl version that is within one minor version difference of your cluster. For example, a v1.2 client should work with v1.1, v1.2, and v1.3 master. Using the latest version of kubectl helps avoid unforeseen issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CentOS, RHEL or Fedora&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat &amp;lt;&amp;lt;EOF &amp;gt; /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
$ yum install -y kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;安装minikube&#34;&gt;安装minikube&lt;/h2&gt;

&lt;h5 id=&#34;environment-1&#34;&gt;Environment&lt;/h5&gt;

&lt;p&gt;version: 0.30.0&lt;/p&gt;

&lt;h5 id=&#34;install&#34;&gt;Install&lt;/h5&gt;

&lt;h6 id=&#34;normal&#34;&gt;Normal&lt;/h6&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.30.0/minikube-linux-amd64 &amp;amp;&amp;amp; chmod +x minikube &amp;amp;&amp;amp; sudo cp minikube /usr/local/bin/ &amp;amp;&amp;amp; rm minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，minikube整个安装过程非常简单，按照官方文档的&lt;strong&gt;quick start&lt;/strong&gt;执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ minikube start
Starting local Kubernetes v1.7.5 cluster...
Starting VM...
SSH-ing files into VM...
Setting up certs...
Starting cluster components...
Connecting to cluster...
Setting up kubeconfig...
Kubectl is now configured to use the cluster.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是真正噩梦的开始，直接按照以上命令执行，会卡在&lt;strong&gt;Starting cluster components&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了方便理解整个过程，先来看一下minikube的架构&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/blog.ichasco.com/wp-content/uploads/2018/06/minikube-architecture.jpg?resize=810%2C455&amp;amp;ssl=1&#34; alt=&#34;minikube-1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在启动minikube的时候，首先会向gcr.io(待考证)拉取一个ISO镜像，因为之前配置好的缘故，这里是可以拉取成功的，之后会利用之前安装好的hypervisor在宿主机中启一个virtual machine，之后准备在该virtual machine中构建整个kubernetes，问题就发生在这一步，用于构建kubernetes的所有组件是以镜像形式存在的，所以在构建之初，会在virtual machine里向gcr.io拉取所有组件镜像，虽然之前通过配置，可以使得宿主机从gcr.io拉镜像下来，但在virtual machine中却没有做相关配置，这导致在virtual machine中是无法从gcr.io中拉取镜像的&lt;/p&gt;

&lt;p&gt;明白了这一点，就想到把virtual machine中的docker daemon配置一个代理，从而使得virtual machine中的docker daemon通过代理从gcr.io拉取镜像，minikube也提供相关的命令选项来实现这一点&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ minikube start --docker-env HTTP_PROXY=http://yourhost:yourport --docker-env HTTPS_PROXY=http://yourhost:yourport --docker-env NO_PROXY=192.168.99.0/24
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特别注意的是&lt;strong&gt;NO_PROXY&lt;/strong&gt;，上述命令已经使得virtual machine中的docker daemon走代理，但同时要保证容器之间的通信不能走代理，因为每个容器都是内网IP，一旦走代理，代理服务器将永远找不到要通信的容器对象，minikube中所有组件容器在&lt;strong&gt;192.168.99.0/24&lt;/strong&gt;这个网域，所以这个网域的所有IP不应走代理&lt;/p&gt;

&lt;p&gt;但是执行上述命令后仍会发现卡在&lt;strong&gt;Starting cluster components&amp;hellip;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是因为安装在宿主机的&lt;strong&gt;kubectl&lt;/strong&gt;是全局走代理的，在启动minikube后，&lt;strong&gt;kubectl&lt;/strong&gt;需要和virtual machine中的kubernetes cluster通信，问题就出在这一步，这一步通信现阶段依然是走代理的，但由于virtual machine的ip是内网IP，所以通过代理去找这个内网IP是永远找不到的，导致&lt;strong&gt;kubectl&lt;/strong&gt;无法建立通信，卡在这里，为了解决这个问题，让kubernetes访问该virtual machine时不走代理，直接通信，执行如下命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#192.168.99.100是运行minikube cluster的virtual machine的IP
$ export no_proxy=192.168.99.100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在见到如下信息后&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Starting local Kubernetes v1.7.5 cluster...
Starting VM...
SSH-ing files into VM...
Setting up certs...
Starting cluster components...
Connecting to cluster...
Setting up kubeconfig...
Kubectl is now configured to use the cluster.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行如下命令(待考证)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export no_proxy=$no_proxy,$(minikube ip)
$ export NO_PROXY=$no_proxy,$(minikube ip)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后按照如下命令测试&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080
deployment &amp;quot;hello-minikube&amp;quot; created
$ kubectl expose deployment hello-minikube --type=NodePort
service &amp;quot;hello-minikube&amp;quot; exposed

# We have now launched an echoserver pod but we have to wait until the pod is up before curling/accessing it
# via the exposed service.
# To check whether the pod is up and running we can use the following:
$ kubectl get pod
NAME                              READY     STATUS              RESTARTS   AGE
hello-minikube-3383150820-vctvh   1/1       ContainerCreating   0          3s
# We can see that the pod is still being created from the ContainerCreating status
$ kubectl get pod
NAME                              READY     STATUS    RESTARTS   AGE
hello-minikube-3383150820-vctvh   1/1       Running   0          13s
# We can see that the pod is now Running and we will now be able to curl it:
$ curl $(minikube service hello-minikube --url)
CLIENT VALUES:
client_address=192.168.99.1
command=GET
real path=/
...
$ kubectl delete service hello-minikube
service &amp;quot;hello-minikube&amp;quot; deleted
$ kubectl delete deployment hello-minikube
deployment &amp;quot;hello-minikube&amp;quot; deleted
$ minikube stop
Stopping local Kubernetes cluster...
Machine stopped.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以发现是成功的&lt;/p&gt;

&lt;h6 id=&#34;unnormal&#34;&gt;Unnormal&lt;/h6&gt;

&lt;p&gt;这里参考阿里易立的思路，提供一种不配置代理，直接启minikube的方案&lt;/p&gt;

&lt;p&gt;之前之所以没办法按正常的方式启是因为minikube总需要从gcr.io拉镜像，导致镜像一直拉不下来，进而失败，易立的思路很简单，就是把minikube源码中涉及访问gcr.io的部分替换为访问阿里云的镜像源，从根本上解决了问题(需要注意的是，如果之后继续按照github上minikube项目中&lt;strong&gt;quick start&lt;/strong&gt;部分去测试的话，是无法成功的，因为命令&lt;code&gt;kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.4 --port=8080&lt;/code&gt;本身就是从gcr.io拉镜像，而此时virtual machine中的docker daemon是没有配置代理的)&lt;/p&gt;

&lt;p&gt;解决办法暂时能想到的是从国内镜像源拉景象，这就涉及到可能需要重新docker login一下(具体有待尝试)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/AliyunContainerService/minikube/tree/aliyun-v0.30.0&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt; - 阿里云魔改版minikube分支&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/221687?spm=a2c4e.11153940.blogcont221687.227.41a77733GGXJ0Y&amp;amp;p=1#comments&#34; target=&#34;_blank&#34;&gt;云栖社区&lt;/a&gt; - 易立云栖社区BLOG&lt;/p&gt;

&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/41378f4e14bc&#34; target=&#34;_blank&#34;&gt;简书&lt;/a&gt; - joncc的简书BLOG&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://fatfatson.github.io/2018/07/23/mac%E4%B8%8A%E5%AE%89%E8%A3%85mimikube/&#34; target=&#34;_blank&#34;&gt;就不怕忘记了&lt;/a&gt; - mac上安装minikube及排错记&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube/issues/530&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt; - Starting minikube behind a proxy&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Unknwon/wuwen.org/issues/20&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt; - 代理环境下在 macOS 上安装 Minikube 小记&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube/blob/master/docs/http_proxy.md&#34; target=&#34;_blank&#34;&gt;github&lt;/a&gt; - Using Minikube with an HTTP Proxy&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/20778771/what-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost&#34; target=&#34;_blank&#34;&gt;What is the difference between 0.0.0.0, 127.0.0.1 and localhost?&lt;/a&gt;&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://analyse4.github.io/posts/my-first-post/</link>
      <pubDate>Mon, 04 Mar 2019 15:07:12 +0800</pubDate>
      <author>Zehua Lu</author>
      <guid>https://analyse4.github.io/posts/my-first-post/</guid>
      <description></description>
      
      <content>&lt;pre&gt;&lt;code&gt;$ Why so serious?
&lt;/code&gt;&lt;/pre&gt;
</content>
      
    </item>
    
  </channel>
</rss>